name: Secure Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  security-pre-check:
    runs-on: ubuntu-latest
    outputs:
      security-passed: ${{ steps.security-check.outputs.passed }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: '10.0.0'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Security validation
      id: security-check
      run: |
        echo "🔍 Running pre-deployment security checks..."

        # Check for secrets in environment files
        if find . -name ".env*" -not -name ".env.example" -exec grep -l "sk_\|pk_\|SECRET\|PASSWORD\|API_KEY" {} \; | grep -v node_modules; then
          echo "❌ Secrets found in environment files"
          exit 1
        fi

        # Validate form configuration
        if pnpm run test:content; then
          echo "✅ Content validation passed"
        else
          echo "❌ Content validation failed"
          exit 1
        fi

        # TypeScript and linting checks
        pnpm run check
        pnpm run lint

        echo "✅ Security pre-checks passed"
        echo "passed=true" >> $GITHUB_OUTPUT

  build-secure:
    needs: security-pre-check
    runs-on: ubuntu-latest
    if: needs.security-pre-check.outputs.security-passed == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: '10.0.0'

    - name: Install dependencies with integrity check
      run: |
        # Verify lock file integrity
        pnpm install --frozen-lockfile

        # Generate integrity report
        pnpm list --json > dependency-report.json

    - name: Build with security hardening
      run: |
        # Set secure environment for build
        export NODE_ENV=production
        export DEPLOYMENT_TARGET=github

        # Build the site
        pnpm run build

        # Post-build security validation
        echo "🔍 Validating build output..."

        # Check for leftover development artifacts
        if find dist/ -name "*.map" -o -name "*.development.*"; then
          echo "⚠️ Development artifacts found in production build"
        fi

        # Verify no inline scripts without CSP
        if grep -r "javascript:" dist/ --include="*.html"; then
          echo "❌ Unsafe inline JavaScript detected"
          exit 1
        fi

        # Check for exposed environment variables
        if grep -r "process\.env\|import\.meta\.env\.SECRET" dist/ --include="*.js" --include="*.html"; then
          echo "❌ Exposed environment variables detected"
          exit 1
        fi

        echo "✅ Build security validation completed"

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact with security validation
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-secure

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Post-deployment security check
      run: |
        echo "🔍 Running post-deployment checks..."

        # Wait for deployment to propagate
        sleep 30

        # Basic connectivity test
        curl -f -s ${{ steps.deployment.outputs.page_url }} > /dev/null

        if [ $? -eq 0 ]; then
          echo "✅ Deployment successful and accessible"
        else
          echo "❌ Deployment accessibility check failed"
          exit 1
        fi

        echo "🎉 Secure deployment completed successfully"