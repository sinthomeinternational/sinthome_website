---
import "../styles/global.css";
import { getTheme } from "../config/themes";

// 导入资源管理模块
import { assets } from "../lib/assets";

const { title, description, theme = 'dark' } = Astro.props;

const defaultTitle = "Sinthome - Knowledge, Critique, Praxis";
const defaultDescription = "A public-interest community reconstructing new relations of production through the integration of knowledge learning, theoretical critique, and social praxis.";

// Get theme configurations for CSS variables (default to dark theme)
const darkThemeConfig = getTheme('dark');
const lightThemeConfig = getTheme('light');
---

<!doctype html>
<html lang="en" class={`theme-${theme}`} data-theme={theme}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href={assets.favicon} />
		<meta name="generator" content={Astro.generator} />
		<title>{title ?? defaultTitle}</title>
		<meta name="description" content={description ?? defaultDescription} />

		<!-- Google Fonts - League Spartan for sharp geometric look -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=League+Spartan:wght@700;800;900&display=swap" rel="stylesheet">

		<meta property="og:url" content={Astro.url.href} />
		<meta property="og:type" content="website" />
		<meta property="og:title" content={defaultTitle} />
		<meta property="og:description" content={defaultDescription} />
		<meta property="og:image" content={assets.socialImage} />

		<!-- Twitter Meta Tags -->
		<meta name="twitter:card" content="summary_large_image" />
		<meta property="twitter:domain" content={Astro.url.hostname} />
		<meta property="twitter:url" content={Astro.url.href} />
		<meta name="twitter:title" content={defaultTitle} />
		<meta name="twitter:description" content={defaultDescription} />
		<meta name="twitter:image" content={assets.socialImage} />

		<!-- Removing ClientRouter to maintain static site benefits and avoid SPA behavior -->
		<!-- <ClientRouter /> -->
		<!-- <LoadingIndicator color="#f4f4f5" height="2px" /> -->

		<!-- Theme CSS Variables -->
		<style define:vars={{
			'theme-bg-primary-dark': darkThemeConfig.colors.bgPrimary,
			'theme-bg-secondary-dark': darkThemeConfig.colors.bgSecondary,
			'theme-bg-tertiary-dark': darkThemeConfig.colors.bgTertiary,
			'theme-bg-card-dark': darkThemeConfig.colors.bgCard,
			'theme-text-primary-dark': darkThemeConfig.colors.textPrimary,
			'theme-text-secondary-dark': darkThemeConfig.colors.textSecondary,
			'theme-text-muted-dark': darkThemeConfig.colors.textMuted,
			'theme-accent-dark': darkThemeConfig.colors.accent,
			'theme-accent-hover-dark': darkThemeConfig.colors.accentHover,
			'theme-border-dark': darkThemeConfig.colors.border,
			'theme-border-hover-dark': darkThemeConfig.colors.borderHover,
			'theme-tag-bg-dark': darkThemeConfig.colors.tagBg,
			'theme-tag-text-dark': darkThemeConfig.colors.tagText,
			'theme-bg-primary-light': lightThemeConfig.colors.bgPrimary,
			'theme-bg-secondary-light': lightThemeConfig.colors.bgSecondary,
			'theme-bg-tertiary-light': lightThemeConfig.colors.bgTertiary,
			'theme-bg-card-light': lightThemeConfig.colors.bgCard,
			'theme-text-primary-light': lightThemeConfig.colors.textPrimary,
			'theme-text-secondary-light': lightThemeConfig.colors.textSecondary,
			'theme-text-muted-light': lightThemeConfig.colors.textMuted,
			'theme-accent-light': lightThemeConfig.colors.accent,
			'theme-accent-hover-light': lightThemeConfig.colors.accentHover,
			'theme-border-light': lightThemeConfig.colors.border,
			'theme-border-hover-light': lightThemeConfig.colors.borderHover,
			'theme-tag-bg-light': lightThemeConfig.colors.tagBg,
			'theme-tag-text-light': lightThemeConfig.colors.tagText,
		}}>
			:root {
				/* Dark theme variables (default) */
				--theme-bg-primary: var(--theme-bg-primary-dark);
				--theme-bg-secondary: var(--theme-bg-secondary-dark);
				--theme-bg-tertiary: var(--theme-bg-tertiary-dark);
				--theme-bg-card: var(--theme-bg-card-dark);
				--theme-text-primary: var(--theme-text-primary-dark);
				--theme-text-secondary: var(--theme-text-secondary-dark);
				--theme-text-muted: var(--theme-text-muted-dark);
				--theme-accent: var(--theme-accent-dark);
				--theme-accent-hover: var(--theme-accent-hover-dark);
				--theme-border: var(--theme-border-dark);
				--theme-border-hover: var(--theme-border-hover-dark);
				--theme-tag-bg: var(--theme-tag-bg-dark);
				--theme-tag-text: var(--theme-tag-text-dark);
			}

			/* Light theme variables */
			html.theme-light {
				--theme-bg-primary: var(--theme-bg-primary-light);
				--theme-bg-secondary: var(--theme-bg-secondary-light);
				--theme-bg-tertiary: var(--theme-bg-tertiary-light);
				--theme-bg-card: var(--theme-bg-card-light);
				--theme-text-primary: var(--theme-text-primary-light);
				--theme-text-secondary: var(--theme-text-secondary-light);
				--theme-text-muted: var(--theme-text-muted-light);
				--theme-accent: var(--theme-accent-light);
				--theme-accent-hover: var(--theme-accent-hover-light);
				--theme-border: var(--theme-border-light);
				--theme-border-hover: var(--theme-border-hover-light);
				--theme-tag-bg: var(--theme-tag-bg-light);
				--theme-tag-text: var(--theme-tag-text-light);
			}
		</style>

		<!-- Inline script to prevent theme flash -->
		<script is:inline>
			(function() {
				// Remove any existing theme classes first
				document.documentElement.classList.remove('theme-light', 'theme-dark');

				// Check URL parameters first
				const urlParams = new URLSearchParams(window.location.search);
				const urlTheme = urlParams.get('theme');

				// Determine which theme to use (priority: URL > localStorage > default to dark)
				let theme = 'dark'; // Default to dark theme

				if (urlTheme === 'light') {
					theme = 'light';
					// Save URL theme to localStorage for future visits
					localStorage.setItem('theme', 'light');
				} else if (urlTheme === 'dark') {
					theme = 'dark';
					// Save URL theme to localStorage for future visits
					localStorage.setItem('theme', 'dark');
				} else {
					// No URL theme parameter, check localStorage
					const storedTheme = localStorage.getItem('theme');
					if (storedTheme === 'light') {
						theme = 'light';
					} else {
						// For any other case (null, undefined, 'dark', or invalid values), use dark
						theme = 'dark';
						// Always ensure localStorage is set to dark for consistency
						localStorage.setItem('theme', 'dark');
					}
				}

				// Apply theme classes to html element
				document.documentElement.classList.add(`theme-${theme}`);

				// Apply data attribute for CSS targeting
				document.documentElement.setAttribute('data-theme', theme);
			})();
		</script>
	</head>
	<body class="font-sans min-h-screen">
		<slot />

		<!-- Script to restore scroll position after language switch -->
		<script>
			// Restore scroll position if this was a language switch
			const scrollPosition = sessionStorage.getItem('scrollPosition');
			const switchTimestamp = sessionStorage.getItem('languageSwitchTimestamp');

			// Only restore if switch happened within last 3 seconds (prevents stale restores)
			if (scrollPosition && switchTimestamp) {
				const timeSinceSwitch = Date.now() - parseInt(switchTimestamp);
				if (timeSinceSwitch < 3000) {
					// Wait for page to fully load before restoring
					window.addEventListener('load', () => {
						requestAnimationFrame(() => {
							window.scrollTo({
								top: parseInt(scrollPosition),
								behavior: 'instant'
							});
							sessionStorage.removeItem('scrollPosition');
							sessionStorage.removeItem('languageSwitchTimestamp');
						});
					});
				} else {
					// Clean up stale data
					sessionStorage.removeItem('scrollPosition');
					sessionStorage.removeItem('languageSwitchTimestamp');
				}
			}
		</script>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
</style>
